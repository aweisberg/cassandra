version: 2
jobs:
  build:
    resource_class: xlarge
    working_directory: ~/
    parallelism: 22
    docker:
      - image: ubuntu:xenial-20170410
    steps:
      - run:
          name: apt-get install packages
          command: |
            echo "export LANG=en_US.UTF-8" >> ~/env_dtest_common
            echo "export JDK_HOME=/usr/lib/jvm/zulu-8-amd64" >> ~/env_dtest_common
            echo 'export JAVA_HOME=$JDK_HOME/jre' >> ~/env_dtest_common
            echo 'export JAVA8_HOME=$JDK_HOME' >> ~/env_dtest_common
            echo "export JAVA7_HOME=/usr/lib/jvm/zulu-7-amd64" >> ~/env_dtest_common
            echo "export LANG=en_US.UTF-8" >> ~/env_dtest_common
            echo "export DEBUG=true" >> ~/env_dtest_common
            echo "export PRINT_DEBUG=true" >> ~/env_dtest_common
            echo 'export allow_root="yes"' >> ~/env_dtest_common
            echo "export KEEP_TEST_DIR=true" >> ~/env_dtest_common
            echo "export CASSANDRA_DIR=$HOME/cassandra" >> ~/env_dtest_common
            echo "export PYTHONIOENCODING="utf-8"" >> ~/env_dtest_common
            echo "export PYTHONUNBUFFERED=true" >> ~/env_dtest_common
            echo "export CASS_DRIVER_NO_EXTENSIONS=true" >> ~/env_dtest_common
            echo "export CASS_DRIVER_NO_CYTHON=true" >> ~/env_dtest_common
            echo 'export CCM_MAX_HEAP_SIZE="2048M"' >> ~/env_dtest_common
            echo 'export CCM_HEAP_NEWSIZE="200M"' >> ~/env_dtest_common
            export LANG=en_US.UTF-8
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0x219BD9C9
            echo 'deb http://repos.azulsystems.com/debian stable main' > /etc/apt/sources.list.d/zulu.list
            apt-get update
            apt-get install -y git-core npm python python-pip python-dev zulu-8 zulu-7 ant ant-optional net-tools
            ln -s /usr/bin/nodejs /usr/bin/node || true
      - run:
          name: Log environment information
          command: |
              echo '*** id ***'
              id
              echo '*** cat /proc/cpuinfo ***'
              cat /proc/cpuinfo
              echo '*** free -m ***'
              free -m
              echo '*** df -m ***'
              df -m
              echo '*** ifconfig -a ***'
              ifconfig -a
              echo '*** uname -a ***'
              uname -a
              echo '*** mount ***'
              mount
              echo '*** env ***'
              env
      - run:
          name: Clone git repos
          command: |
            export LANG=en_US.UTF-8
            git clone --single-branch --depth 1 https://github.com/aweisberg/cassandra-dtest ~/cassandra-dtest
            git clone --single-branch --depth 1 --branch $CIRCLE_BRANCH git://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git ~/cassandra
      - run:
          name: Install junit-merge
          command: npm install -g junit-merge
      - run:
          name: Install virtualenv
          command: pip install virtualenv 
      - run:
          name: Configure virtualenv and python dependencies
          command: |
            export LANG=en_US.UTF-8
            virtualenv --python=python2 --no-site-packages venv
            source venv/bin/activate
            export CASS_DRIVER_NO_EXTENSIONS=true
            export CASS_DRIVER_NO_CYTHON=true
            pip install -r ~/cassandra-dtest/requirements.txt
            pip freeze
      - run:
          name: Build Cassandra
          command: |
            export LANG=en_US.UTF-8
            export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8"
            cd ~/cassandra
            # Loop to prevent failure due to maven-ant-tasks not downloading a jar..
            for x in $(seq 1 3); do
                ant clean jar
                RETURN="$?"
                if [ "${RETURN}" -eq "0" ]; then
                    break
                fi
            done
            # Exit, if we didn't build successfully
            if [ "${RETURN}" -ne "0" ]; then
                echo "Build failed with exit code: ${RETURN}"
                exit ${RETURN}
            fi
          no_output_timeout: 20m
      - run:
          name: Determine tests to run
          no_output_timeout: 10m
          command: |
            #"$HOME/cassandra-dtest/**/*.py"
            export LANG=en_US.UTF-8
            echo `circleci tests glob "$HOME/cassandra/test/unit/**" "$HOME/cassandra-dtest/**/*.py" | grep -v upgrade_tests | grep -v "cassandra-thrift" | grep -v "thrift_bindings" | grep -v "tools" | grep -v "dtest.py" | grep -v "$HOME/cassandra-dtest/bin" | grep -v "plugins" | circleci tests split --split-by=timings --timings-type=filename` > /tmp/tests.txt
            echo "***processed tests***"
            cat /tmp/tests.txt | sed -e 's/\s\+/\n/g' > /tmp/processed_tests.txt
            cat /tmp/processed_tests.txt
            echo "***java tests***"
            cat /tmp/processed_tests.txt | grep "\.java$" > /tmp/java_tests.txt
            cat /tmp/java_tests.txt
            cat /tmp/java_tests.txt | cut -c 27-1000000 | grep "Test\.java$" > /tmp/java_tests_final.txt
            echo "***final java tests***"
            cat /tmp/java_tests_final.txt
            echo "***python tests***"
            cat /tmp/processed_tests.txt | grep "\.py$" > /tmp/python_tests.txt
            cat /tmp/python_tests.txt
            echo "***final python tests***"
            cat /tmp/python_tests.txt | tr '\n' ' ' > /tmp/python_tests_final.txt
            cat /tmp/python_tests_final.txt
      - run:
         name: Run unit tests
         command: |
            export LANG=en_US.UTF-8
            export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8"
            cd ~/cassandra
            ant testclasslist -Dtest.runners=4 -Dtest.classlistfile=/tmp/java_tests_final.txt || true
         no_output_timeout: 15m
      - run:
          name: Run dtests
          no_output_timeout: 70m
          command: |
            source ~/venv/bin/activate
            source ~/env_dtest_common
            cd ~/cassandra-dtest
            mkdir -p /tmp/dtest
            export NUM_TOKENS="32"
            ./run_dtests.py --vnodes true --nose-options="--verbosity=3 --with-xunit --nocapture --attr=!resource-intensive" `cat /tmp/python_tests_final.txt`  2>&1 | tee /tmp/dtest/stdout.txt || true
      - run:
          name: Collect and merge test results
          command: |
            rm -f $HOME/cassandra-dtest/logs/last || true
            mkdir -p /tmp/results/junit || true
            junit-merge ~/cassandra-dtest/nosetests.xml || true
            cp  merged-test-results.xml /tmp/results/junit || true
            mkdir /tmp/dtest_dirs
            tar cfz /tmp/dtest_dirs/dirs.tgz /tmp/dtest-*
            cp -r /tmp/dtest-* /tmp/dtest_dirs
#            junit-merge ~/cassandra/build/test/output/*.xml ~/cassandra-dtest/nosetests.xml
      - store_test_results:
          path: /tmp/results
      - store_artifacts:
          path: ~/cassandra/build/test/output
          destination: junitxml
      - store_artifacts:
          path: ~/cassandra/build/test/logs
          destination: logs
      - store_artifacts:
          path: /tmp/dtest
          destination: dtest
      - store_artifacts:
          path: ~/cassandra-dtest/logs
          destination: dtest_logs
      - store_artifacts:
          path: /tmp/dtest_dirs
          destination: dtest_dirs
